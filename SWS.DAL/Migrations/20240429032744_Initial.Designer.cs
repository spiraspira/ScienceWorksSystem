// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SWS.DAL.Entities;

#nullable disable

namespace SWS.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240429032744_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SWS.DAL.Entities.Committee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("SWS.DAL.Entities.CommitteeMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommitteeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndFirstTour")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndSecondTour")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartFirstTour")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartSecondTour")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("InvitedTeacherId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationCommitteeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProgramCommitteeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvitedTeacherId");

                    b.HasIndex("OrganizationCommitteeId");

                    b.HasIndex("ProgramCommitteeId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NominationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProgramCommitteeMemberId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ReportGrade")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NominationId");

                    b.HasIndex("ProgramCommitteeMemberId");

                    b.HasIndex("ReportId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Nomination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("Nomination");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer");

                    b.Property<int?>("InvitedTeacherGrade")
                        .HasColumnType("integer");

                    b.Property<string>("InvitedTeacherReview")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("TeamId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrganizationCommitteeMemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationCommitteeMemberId");

                    b.HasIndex("ReportId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SWS.DAL.Entities.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("SWS.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsStudent")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Committee", b =>
                {
                    b.HasOne("SWS.DAL.Entities.Teacher", "Teacher")
                        .WithMany("SubordinateCommittees")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SWS.DAL.Entities.CommitteeMember", b =>
                {
                    b.HasOne("SWS.DAL.Entities.Committee", "Committee")
                        .WithMany("Members")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.Teacher", "Teacher")
                        .WithMany("Committees")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Committee");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Contest", b =>
                {
                    b.HasOne("SWS.DAL.Entities.Teacher", "InvitedTeacher")
                        .WithMany("InvitedContests")
                        .HasForeignKey("InvitedTeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.Committee", "OrganizationCommittee")
                        .WithMany("OrganizationContests")
                        .HasForeignKey("OrganizationCommitteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.Committee", "ProgramCommittee")
                        .WithMany("ProgramContests")
                        .HasForeignKey("ProgramCommitteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InvitedTeacher");

                    b.Navigation("OrganizationCommittee");

                    b.Navigation("ProgramCommittee");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Grade", b =>
                {
                    b.HasOne("SWS.DAL.Entities.Nomination", "Nomination")
                        .WithMany("Grades")
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.CommitteeMember", "ProgramCommitteeMember")
                        .WithMany("Grades")
                        .HasForeignKey("ProgramCommitteeMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.Report", "Report")
                        .WithMany("Grades")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Nomination");

                    b.Navigation("ProgramCommitteeMember");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Nomination", b =>
                {
                    b.HasOne("SWS.DAL.Entities.Contest", "Contest")
                        .WithMany("Nominations")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Report", b =>
                {
                    b.HasOne("SWS.DAL.Entities.Contest", "Contest")
                        .WithMany("Reports")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.Team", "Team")
                        .WithMany("Reports")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Contest");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Review", b =>
                {
                    b.HasOne("SWS.DAL.Entities.CommitteeMember", "OrganizationCommitteeMember")
                        .WithMany("Reviews")
                        .HasForeignKey("OrganizationCommitteeMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.Report", "Report")
                        .WithMany("Reviews")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OrganizationCommitteeMember");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Student", b =>
                {
                    b.HasOne("SWS.DAL.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SWS.DAL.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Teacher", b =>
                {
                    b.HasOne("SWS.DAL.Entities.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("SWS.DAL.Entities.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Team", b =>
                {
                    b.HasOne("SWS.DAL.Entities.Student", "Student")
                        .WithMany("Teams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SWS.DAL.Entities.Teacher", "Teacher")
                        .WithMany("Teams")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SWS.DAL.Entities.User", b =>
                {
                    b.HasOne("SWS.DAL.Entities.University", "University")
                        .WithMany("Users")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("University");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Committee", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("OrganizationContests");

                    b.Navigation("ProgramContests");
                });

            modelBuilder.Entity("SWS.DAL.Entities.CommitteeMember", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Contest", b =>
                {
                    b.Navigation("Nominations");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Nomination", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Report", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Student", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Teacher", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("InvitedContests");

                    b.Navigation("SubordinateCommittees");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SWS.DAL.Entities.Team", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SWS.DAL.Entities.University", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SWS.DAL.Entities.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
